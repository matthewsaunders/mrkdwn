module Mrkdwn
  INLINE_TOKEN_TYPES = %w(EM STRONG DEL CODE A)

  # A class for rendering tokens generated by the Mrkdwn::Parser class into a
  # string HTML fragment. Accessed by calling:
  #
  # html = Mrkdwn::Renderer.render(tokens)
  #
  class Renderer
    def initialize(tokens, inline_context)
      @tokens = tokens
      @inline_context = inline_context
    end

    def self.render(tokens = [], inline_context = false)
      r = Renderer.new(tokens, inline_context)
      r.render
    end

    def is_newline(token)
      token && token[:type] == 'NEW_LINE'
    end

    def is_alpha_numeric?(char)
      char =~ /[[:alnum:]]/
    end

    def render
      doc = ''
      default_spacer = @inline_context ? ' ' : ''

      @tokens.each_with_index do |token, index|
        spacer = default_spacer
        next_token = index + 1 < @tokens.length ? @tokens[index + 1] : nil

        # Add space after an inline style tag unless one of the exceptions in
        # the following checks
        if INLINE_TOKEN_TYPES.include?(token[:type])
          spacer = ' '
        end

        # If next token is a new line, space with a new line
        if  is_newline(token) || is_newline(next_token)
          spacer = ''
        end

        # If next token is not alphanumeric, do not space it
        # This is to avoid adding a space between inline styles and punctuation.
        if next_token && next_token[:type] == 'RAW_TEXT' && !next_token[:text].empty? && !is_alpha_numeric?(next_token[:text][0])
          spacer = ''
        end

        doc += render_token(token) + spacer
      end

      doc = doc.strip
      @inline_context ? doc : doc + "\n"
    end

    def render_token(token)
      case token[:type]
      when 'RAW_TEXT'
        self.raw_text(token)
      when 'TEXT'
        self.text(token)
      when 'HEADING'
        self.heading(token)
      when 'A'
        self.anchor(token)
      when 'STRONG'
        self.strong(token)
      when 'EM'
        self.em(token)
      when 'DEL'
        self.del(token)
      when 'CODE'
        self.code(token)
      when 'NEW_LINE'
        self.new_line
      else
        '' # do nothing
      end
    end

    def raw_text(token)
      token[:text]
    end

    def new_line
      "\n"
    end

    def text(token)
      inner_content = Mrkdwn::Renderer.render(token[:tokens], true)
      "<p>#{inner_content}</p>\n\n"
    end

    def heading(token)
      inner_content = Mrkdwn::Renderer.render(token[:tokens], true)
      "<h#{token[:depth]}>#{inner_content}</h#{token[:depth]}>\n\n"
    end

    def anchor(token)
      inner_content = Mrkdwn::Renderer.render(token[:tokens], true)
      "<a href=\"#{token[:href]}\">#{inner_content}</a>"
    end

    def render_inline_tag(tag, token)
      inner_content = Mrkdwn::Renderer.render(token[:tokens], true)
      "<#{tag}>#{inner_content}</#{tag}>"
    end

    def strong(token)
      render_inline_tag('strong', token)
    end

    def em(token)
      render_inline_tag('em', token)
    end

    def del(token)
      render_inline_tag('del', token)
    end

    def code(token)
      render_inline_tag('code', token)
    end
  end
end
